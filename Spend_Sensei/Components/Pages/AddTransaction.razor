@page "/add-transaction"
@inject Spend_Sensei.Services.TransactionService TransactionService
@using Spend_Sensei.Models

<h1>Add Transaction</h1>

<form class="transaction-form">
    <!-- Transaction Type -->
    <div>
        <label>Type:</label>
        <select @bind="newTransaction.Type" class="form-control">
            <option value="">-- Select Type --</option>
            <option value="Inflow">Inflow</option>
            <option value="Outflow">Outflow</option>
            <option value="Debt">Debt</option>
        </select>
    </div>
    @if (!string.IsNullOrEmpty(errorMessageType))
    {
        <p class="error-message">@errorMessageType</p>
    }

    <!-- Amount -->
    <div>
        <label>Amount:</label>
        <input type="number" @bind="newTransaction.Amount" class="form-control" min="0" />
    </div>
    @if (!string.IsNullOrEmpty(errorMessageAmount))
    {
        <p class="error-message">@errorMessageAmount</p>
    }

    <!-- Date -->
    <div>
        <label>Date:</label>
        <input type="date" @bind="newTransaction.Date" class="form-control" />
    </div>

    <!-- Tags -->
    <div>
        <label>Tags:</label>
        <select @bind="selectedTag" class="form-control">
            <option value="Food">Food</option>
            <option value="Shopping">Shopping</option>
            <option value="Entertainment">Entertainment</option>
            <option value="Others">Others</option>
        </select>
        @if (selectedTag == "Others")
        {
            <input type="text" @bind="customTag" class="form-control" placeholder="Enter custom tag" />
        }
    </div>

    <button type="button" @onclick="ValidateAndAddTransaction" class="btn btn-primary">Add Transaction</button>
</form>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

<!-- Popup Modal for Insufficient Balance -->
@if (ShowInsufficientBalancePopup)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h2>âš  Insufficient Balance</h2>
            <p>You don't have enough balance to complete this transaction.</p>
            <button class="close-btn" @onclick="ClosePopup">OK</button>
        </div>
    </div>
}

@code {
    private Transaction newTransaction = new Transaction { Date = DateTime.Now };
    private string successMessage = "";
    private string errorMessageType = "";
    private string errorMessageAmount = "";
    private string selectedTag = "Food"; // Default to the first predefined tag
    private string customTag = "";

    private bool ShowInsufficientBalancePopup = false; // Flag for modal visibility

    private void ValidateAndAddTransaction()
    {
        successMessage = "";
        errorMessageType = "";
        errorMessageAmount = "";

        // Validate Type
        if (string.IsNullOrEmpty(newTransaction.Type))
        {
            errorMessageType = "Please select a transaction type.";
            return;
        }

        // Validate Amount
        if (newTransaction.Amount <= 0)
        {
            errorMessageAmount = "Amount must be greater than zero.";
            return;
        }

        // Set the final tag
        newTransaction.Tags = selectedTag == "Others" && !string.IsNullOrEmpty(customTag) ? customTag : selectedTag;

        // Check balance before allowing outflow
        if (newTransaction.Type == "Outflow")
        {
            decimal availableBalance = TransactionService.GetBalance();
            if (newTransaction.Amount > availableBalance)
            {
                ShowInsufficientBalancePopup = true;
                return;
            }
        }

        // Add the transaction
        TransactionService.AddTransaction(newTransaction);

        // Reset the form
        newTransaction = new Transaction { Date = DateTime.Now };
        selectedTag = "Food";
        customTag = "";
        successMessage = "Transaction added successfully!";
    }

    private void ClosePopup()
    {
        ShowInsufficientBalancePopup = false;
    }
}
